server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful
spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic # Type of connection pool (elastic, fixed, or disabled)
          max-idle-time: 15s # Idle time after which the communication channel will be closed
          max-life-time: 60s # Time after which the communication channel will be closed
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico # Matches the root path and all CSS, JS, and favicon requests
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
           - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
           - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
      default-filters:
        - SaveSession # Ensures the session data is saved before forwarding a request downstream
        - TokenRelay # Enable the propagation of the Access Token when calling a downstream service
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10 # Number of tokens dripped in the bucket each second
              burstCapacity: 20 # Allows request bursts of up to 20 requests
              requestedTokens: 1 # How many tokens a request costs
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff: # Retries with a delay computed as ?firstBackoff * (factor ^ n)?
              first-backoff: 50ms
              max-backoff: 500ms
              factor: 3
              basedOnPreviousValue: false
  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    timeout: 1s
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid,roles # Add roles to the list of scopes so that Edge service can get access ti the user roles
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/PolarBookshop
resilience4j:
  circuitbreaker:
    configs:
      default: # Default configuration bean for all circuit breakers
        slidingWindowSize: 20 # The size of the sliding window used to record the outcome of calls when the circuit is closed
        permittedNumberOfCallsInHalfOpenState: 5 # Number of permitted calls when the circuit is half-open
        failureRateThreshold: 50 # When the failure rate is above the threshold, the circuit becomes open.
        waitDurationInOpenState: 15000 # Waiting time before moving from open to half-open (ms)
  timelimiter:
    configs:
      default: # Default configuration bean for all time limiters
        timeoutDuration: 5s #Configures a timeout (seconds)
logging:
  group:
    # Collect multiple loggers into a group to apply the same configuration to all of them
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  level:
    # Set the logging level for the group
    circuitbreaker: info
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Polar Bookshop

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, gateway, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,redis
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}